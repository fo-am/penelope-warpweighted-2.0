;; -*- mode: scheme; -*-
(load "flx/scm/fluxus.jscm")

(define (auto-strip-normals)
  (pdata-index-map!
   (lambda (i n)
     (if (< i 2)
	 (vcross
	  (vnormalise (vsub (pdata-ref "p" 1) (pdata-ref "p" (+ i 2))))
	  (if (zero? (modulo i 2))
	      (vnormalise (vector 0 0.5 0.5))
	      (vnormalise (vector 0 0.5 -0.5))))
	 (vcross
	  (vnormalise (vsub (pdata-ref "p" (- i 2)) (pdata-ref "p" i)))
	  (if (zero? (modulo i 2))
	      (vnormalise (vector 0 0.5 0.5))
	      (vnormalise (vector 0 0.5 -0.5))))))
   "n"))

(define (auto-strip-tex)
  (pdata-index-map!
   (lambda (i t)
     (if (zero? (modulo i 2))
	 (vector (/ (quotient i 2) 11) 0 0)
	 (vector (/ (quotient i 2) 11) 1 0)))
   "t"))

(define (build-parts weave-height thread-width)
  (define thread-start (/ (- 1 thread-width) 2))
  (define thread-end (- 1 thread-start))
  
  (list
   ;; forward up	
   (let ((p (build-polygons 'triangles 6)))    
     (with-primitive
      p
      (hide 1)
      (pdata-set! "p" 0 (vector 0 thread-start weave-height))
      (pdata-set! "p" 1 (vector 1 thread-start weave-height))
      (pdata-set! "p" 2 (vector 1 thread-end weave-height))
      (pdata-set! "p" 3 (vector 0 thread-start weave-height))
      (pdata-set! "p" 4 (vector 0 thread-end weave-height))
      (pdata-set! "p" 5 (vector 1 thread-end weave-height))

      (pdata-set! "n" 0 (vector 0 0.5 -0.5))
      (pdata-set! "n" 1 (vector 0 0.5 -0.5))
      (pdata-set! "n" 2 (vector 0 -0.5 -0.5))
      (pdata-set! "n" 3 (vector 0 0.5 -0.5))
      (pdata-set! "n" 4 (vector 0 -0.5 -0.5))
      (pdata-set! "n" 5 (vector 0 -0.5 -0.5))

      (pdata-set! "t" 0 (vector 0 0 0))
      (pdata-set! "t" 1 (vector 1 0 0))
      (pdata-set! "t" 2 (vector 1 1 0))
      (pdata-set! "t" 3 (vector 0 0 0))
      (pdata-set! "t" 4 (vector 0 1 0))
      (pdata-set! "t" 5 (vector 1 1 0))
      (pdata-map! (lambda (c) (vector 1 1 1)) "c")

      (pdata-upload!))
     p)

   ;; forward down
   (let ((p (build-polygons 'triangles 6)))    
     (with-primitive
      p
      (hide 1)
      (pdata-set! "p" 0 (vector 0 thread-start -weave-height))
      (pdata-set! "p" 1 (vector 1 thread-start -weave-height))
      (pdata-set! "p" 2 (vector 1 thread-end -weave-height))
      (pdata-set! "p" 3 (vector 0 thread-start -weave-height))
      (pdata-set! "p" 4 (vector 0 thread-end -weave-height))
      (pdata-set! "p" 5 (vector 1 thread-end -weave-height))

      (pdata-set! "n" 0 (vector 0 0.5 -0.5))
      (pdata-set! "n" 1 (vector 0 0.5 -0.5))
      (pdata-set! "n" 2 (vector 0 -0.5 -0.5))
      (pdata-set! "n" 3 (vector 0 0.5 -0.5))
      (pdata-set! "n" 4 (vector 0 -0.5 -0.5))
      (pdata-set! "n" 5 (vector 0 -0.5 -0.5))
      
      (pdata-set! "t" 0 (vector 0 0 0))
      (pdata-set! "t" 1 (vector 1 0 0))
      (pdata-set! "t" 2 (vector 1 1 0))
      (pdata-set! "t" 3 (vector 0 0 0))
      (pdata-set! "t" 4 (vector 0 1 0))
      (pdata-set! "t" 5 (vector 1 1 0))
      (pdata-map! (lambda (c) (vector 1 1 1)) "c")
      ;;(pdata-map! (lambda (n) (vector 0 0 -1)) "n")
      (pdata-upload!))
     p)
   
   ;; right
   (let ((p (build-polygons 'triangle-strip 24)))    
     (with-primitive
      p
      (hide 1)
      (pdata-index-map!
       (lambda (i p)  
	 (let ((r (if (zero? (modulo i 2)) thread-start thread-end)))
	   (let ((a (* (/ (quotient i 2) 12) 0.5 pi)))
	     (vmul (vector (cos a) (sin a) 0) r))))
       "p")
      (pdata-map! (lambda (c) (vector 1 1 1)) "c")
      (auto-strip-tex)
      (auto-strip-normals)
      (pdata-map! (lambda (n) (vmul n -1)) "n")
      (pdata-upload!))
     p)

   ;; left
   (let ((p (build-polygons 'triangle-strip 24)))    
     (with-primitive
      p
      (hide 1)
      (pdata-index-map!
       (lambda (i p)  
	 (let ((r (if (zero? (modulo i 2)) thread-end thread-start)))
	   (let ((a (* (/ (quotient i 2) 11) 0.5 pi)))
	     (vadd (vmul (vector (cos a) (- (sin a)) 0) r)
		   (vector 0 1 0)))))
       "p")
      (auto-strip-tex)
      (auto-strip-normals)
      (pdata-map! (lambda (n) (vmul n -1)) "n")
      (pdata-map! (lambda (c) (vector 1 1 1)) "c")
      
      (pdata-upload!))
     p)

   ;; up
   (let ((p (build-polygons 'triangle-strip 24)))    
     (with-primitive
      p
      (hide 1)
      (rotate (vector 45 0 0))
      (pdata-index-map!
       (lambda (i p)
	 (vector
	  (/ (quotient i 2) 11)
	  (if (zero? (modulo i 2)) thread-start thread-end)
	  (* (cos (* pi (/ (quotient i 2) 12))) -weave-height)))
       "p")

      (auto-strip-tex)
      (pdata-map! (lambda (c) (vector 1 1 1)) "c")
      (pdata-set! "n" 0 (vector 0 0.5 -0.5))
      (pdata-set! "n" 1 (vector 0 -0.5 -0.5))

      (auto-strip-normals)
      
      (pdata-upload!))
     p)
   
   ;; down
   (let ((p (build-polygons 'triangle-strip 24)))    
     (with-primitive
      p
      (hide 1)
      (rotate (vector 45 0 0))
      (pdata-index-map!
       (lambda (i p)
	 (vector
	  (/ (quotient i 2) 11)
	  (if (zero? (modulo i 2)) thread-start thread-end)
	  (* (cos (* pi (/ (quotient i 2) 12))) weave-height)))
       "p")

      (auto-strip-tex)
      (pdata-map! (lambda (c) (vector 1 1 1)) "c")
      (auto-strip-normals)
      (pdata-set! "n" 0 (vector 0 0.5 -0.5))
      (pdata-set! "n" 1 (vector 0 -0.5 -0.5))
      
      (pdata-upload!))
     p)


))


