;; -*- mode: scheme; -*-

(load "flx/scm/fluxus.jscm")
(load "flx/scm/canvas.jscm")

(load "scm/weave-builder.jscm")
(load "scm/constructor.jscm")
(load "scm/parts.jscm")

(load-mesh-cache "models/receptor-donut.obj")

(msg (weave-builder 0 (list 1 1 0 0) 0 4 "?"))

(define (loom warp weft)
  (list warp weft))

(define (loom-warp l) (list-ref l 0))
(define (loom-weft l) (list-ref l 1))


;; ----------------------------------------------------------

(define (build-loom kernel warp-threads weft-threads)
  (loom
   (build-list
    warp-threads
    (lambda (i)
      (constructor
       (weave-builder-warp kernel i weft-threads)
       0
       (mrotate
	(mtranslate (midentity) (vector (+ i 0.5) 1.5 0))
	(vector 0 0 1)
	(* -90 rad-conv))
       (vector 0 0 0.5)
       '())))
   (build-list
    1 (lambda (i)
	(constructor
	 ;;(list "f" "f" "f" "f" "l" "l" "f")
	 (weave-builder-weft kernel warp-threads 0 weft-threads)
	 0
	 (midentity)
	 (vector 1 1 1)
	 '())))))

(define (loom-update l parts)
  (loom
   (map (lambda (e) (constructor-update e parts)) (loom-warp l))
   (map (lambda (e) (constructor-update e parts)) (loom-weft l))))

;;---------------------------------------------------------

(define l 0)
(define loom-root 0)
(define parts '())

(define f 0)
  
(define (build)  
  (console.log "building")
  (set! parts (build-parts))
  (set! loom-root (with-state
  		   (translate (vector -5 5 0))
  		   (rotate (vector 30 40 0))
  		   (build-locator)))
  (with-state
   (parent loom-root)
   (shader-assign-compiled "default")  

   ;;(texture (load-texture "thread.png"))
   (set! l (build-loom
  	    (list
	     (list 1 1 0 0)
	     (list 0 1 1 0)
	     (list 0 0 1 1)
	     (list 1 0 0 1)

	     
;  	     (list 1 1 0 0)
;  	     (list 0 1 0 0)
;  	     (list 0 0 0 0)
;  	     (list 0 0 0 0)
  	     

;	     (list 1 0)
;  	     (list 0 0)

  	     )
  	    12 12)))
  
  )


(define (read-number id)
  (let ((w ($ (string-append "#" id))))
    (parseFloat (js "w[0].value"))))

(define (update)
  (msg (read-number "infection"))
  )

(define (render)
  (when (zero? (modulo f 10))
	(with-state
	 (parent loom-root)
	 (set! l (loom-update l parts))))
  (with-primitive
   loom-root
   (rotate (vector 0 0 0)))
  (set! f (+ f 1)))

(canvas-setup)
;;(clear-colour (list 0 1.0 0 0))
(set-camera-angle 25)
(set-camera-transform (mtranslate (midentity) (vector 0 0 -38)))
(resize-glcanvas webgl-canvas)

(shader-compile "default" (list "p" "n" "t" "c")
		"shaders/default.vert"
		"shaders/default.frag")


(build)

(every-frame (render))
