;; -*- mode: scheme; -*-

;; Penelope Project Software Copyright (C) 2020 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(load "flx/scm/fluxus.jscm")
(load "flx/scm/canvas.jscm")
(load "scm/loom.jscm")
(load "scm/interface.jscm")
(load "scm/generators.jscm")

;;---------------------------------------------------------
(clear)
(crank)

(define l 0)
(define components (init-components))
(define scene-root 0)
(define frame 0)

;   (list (list 0 0 1 0 1 1)
;  	 	  (list 1 0 0 1 1 0)
;		  (list 0 1 0 1 0 1)
;		  (list 1 0 1 0 1 0)
;		  (list 0 1 1 0 0 1)
;		  (list 1 1 0 1 0 0))

(define (init)
  (setup-draft-interface
   (read-number "warp-threads")
   (read-number "weft-threads"))
  (setup-colour-interface)  
  (write-draft-interface
   (list (list 0 0 0 0 0)
		 (list 0 0 0 0 0)
		 (list 0 0 0 0 0)
		 (list 0 0 0 0 0)
		 (list 0 0 0 0 0)))
  (build))

(define (build)  
  (let ((draft (read-draft-interface)))
	;; annoying need to precalculate
	;; corrected fabric size to fit draft and weft
	;; before the loom is created
	(let ((corrected-size
		   (make-divisible-by-wefts
			(make-divisible-by-wefts
			 (read-number "fabric-weft-size") (length draft))
			(length weft-colours))))
	  (set! scene-root (build-locator))
	  (update-look)  
	  (update-view)  
	  (with-state
	   (parent scene-root)
	   (translate (vector 0 (- corrected-size 12) 0))
	   (set! l (build-loom
				(read-draft-interface)
				(read-number "fabric-warp-size")
				(read-number "fabric-weft-size")
				warp-colours
				weft-colours))))))

(define (update)
  (destroy scene-root)
  (build))

(define (update-draft)
  (setup-draft-interface
   (read-number "warp-threads")
   (read-number "weft-threads")))

(define (update-speed)
  (set! weave-time (read-number "loom-speed")))
  
(define (update-look)
  (shader-shared-uniform! "Ambient" "f" (- 1 (read-number "render-contrast")))
  (build-components
   components
   (read-number "weave-depth")
   (read-number "thread-width")
   (is-checked? "render-texture")
   (is-checked? "render-flat")))
  
(define (update-view)
  (set-camera-transform (mtranslate (midentity) (vector 0 1 (- (read-number "camera-distance")))))
  (with-primitive
   scene-root
   (identity)
   (translate (vector -10 5 0))
   (rotate
     (vector
      (read-number "camera-rot-x")
      (read-number "camera-rot-y") 0))))

(define (generate-draft)  
  (write-draft-interface
   (generate (read-selected "preset"))))

(define (invert-draft)  
  (let ((draft (kernel-invert (loom-draft l))))
    (write-draft-interface draft)
    ;;(set! l (loom-modify-draft l draft))
    ))

(define (render)
  (with-state
   (parent scene-root)
   ;; todo: instances don't seem to inherit texture state...
   (texture (load-texture
			 (if (is-checked? "render-texture")
				 "thread.png" "white.png")))
   (set! l (loom-update l (/ 1 60) components)))
  (with-primitive
   scene-root
   (rotate (vector 0 0 0)))
  (set! frame (+ frame 1)))


;;(canvas-setup)
(clear-colour (vector 1 1 1))
(set-camera-angle 25)
(set-camera-transform (mtranslate (midentity) (vector 0 1 (- (read-number "camera-distance")))))
;;(resize-canvas canvas)
(resize-glcanvas webgl-canvas)

;; todo: this isn't working, it's using the default-default shader
(shader-compile "default" (list "p" "n" "t" "c")
				"shaders/default.vert"
				"shaders/default.frag")

(init)
(every-frame (render))



