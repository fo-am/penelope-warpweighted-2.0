;; -*- mode: scheme; -*-

;; Penelope Project Software Copyright (C) 2020 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(define (read-number id)
  (let ((w ($ (string-append "#" id))))
    (parseFloat (js "w[0].value"))))

(define (read-checked id)
  (let ((w ($ (string-append "#" id))))
    (if (js "w[0].checked") 1 0)))

(define (write-checked id v)
  (let ((w ($ (string-append "#" id))))
    (if (zero? v)
	(js "w[0].checked=false")
	(js "w[0].checked=true"))))

(define (is-checked? id)
  (not (zero? (read-checked id))))

(define (read-selected id)
  (let ((w ($ (string-append "#" id))))
    (js "w[0].value")))

(define (draft-row y x)
  (if (< x 0)
      ""
      (string-append
	   "<label class='draft-check'>"
       "<input id='draft-" x "-" y "' type='checkbox' "
       (if (if (zero? (modulo y 2))
	       (zero? (modulo x 2))
	       (zero? (modulo (+ x 1) 2))) "checked" "")
       " ><span class='checkmark'></span></input></label> "
       (draft-row y (- x 1)))))

(define (setup-draft-interface w h)
  (define (_ c y)
    (if (< y 0)
	""
	(string-append
	 (string-append
	  "<div class='draft-row'>"
	  (draft-row y (- w 1))
	  "</div>")
	 (_ c (- y 1)))))
  (let ((c ($ "#draft")))
    (c.html (_ c (- h 1)))))

(define (read-draft-interface)
  (define (read-row x y)
    (if (< x 0)
	'()
	(cons (read-checked (string-append "draft-" x "-" y))
	      (read-row (- x 1) y))))
  (define (read-col y)
    (if (< y 0)
	'()
	(cons (read-row (- (read-number "warp-threads") 1) y)
	      (read-col (- y 1)))))
  (read-col (- (read-number "weft-threads") 1)))

(define (write-draft-interface draft)
  (define (write-row x y)
    (when (>= x 0)
		  (write-checked (string-append "draft-" x "-" y)
						 (list-ref (list-ref draft y) x))
	  (write-row (- x 1) y)))
  (define (write-col y)
    (when (>= y 0)
	  (write-row (- (read-number "warp-threads") 1) y)
	  (write-col (- y 1))))
  (write-col (- (read-number "weft-threads") 1)))

;; colours
(define (hex->colour hex)
  (let ((bigint (parseInt (hex.substring 1) 16)))
    (list (/ (bitwise-and (bitwise-rshift bigint 16) 255) 255)
		  (/ (bitwise-and (bitwise-rshift bigint 8) 255) 255)
		  (/ (bitwise-and bigint 255) 255))))

(define (colour->hex c)
  (define (_ n)
	(let ((v (trunc (* n 255))))
	  (let ((v2 (v.toString 16)))
		(v2.padStart 2 "0"))))
  (string-append
   "#"
   (_ (vx c))
   (_ (vy c)) 
   (_ (vz c))))

(define (colour-selector id)
  (string-append
  "<div id='" id "-div' class='custom-select'>
		  <select id='" id "'>
			<option value='#c5b799'>undyed cotton</option>
			<option value='#c5b799'>undyed cotton</option>
			<option value='#637a8f'>light woad</option>
			<option value='#445a8a'>dark woad</option>
			<option value='#574e5e'>oak gall</option>
			<option value='#a11939'>dark madder</option>
			<option value='#de9170'>light madder</option>
			<option value='#eae82b'>light weld</option>
			<option value='#929240'>dark weld</option>
		  </select>
		</div>"))

;; can't 'store' the colours in the input fields so 'for now'
;; store them globally here...

;; actually, now we are using a select we are so retrofitting badly

(define warp-colours 
  (list (hex->colour "#c5b799") (hex->colour "#c5b799")))
(define weft-colours
  (list (hex->colour "#c5b799") (hex->colour "#c5b799")))

(define (build-colour-selectors type cols n)
  (if (null? cols)
      ""
      (string-append
       (colour-selector (string-append "colour-" type "-" n))
       (build-colour-selectors type (cdr cols) (+ n 1)))))

(define (setup-colour-interface)
  (let ((c ($ "#warp-colours")))
    (c.html (build-colour-selectors "warp" warp-colours 0)))
  (let ((c ($ "#weft-colours")))
    (c.html (build-colour-selectors "weft" weft-colours 0)))

  (initOneColourSelect (string-append "colour-warp-0-div"))
  (initOneColourSelect (string-append "colour-warp-1-div"))
  (initOneColourSelect (string-append "colour-weft-0-div"))
  (initOneColourSelect (string-append "colour-weft-1-div")))

(define (add-colour type)
  (cond
   ((eq? type "warp")
	(let ((c ($ "#warp-colours")))
	  (c.append (colour-selector (string-append "colour-" type "-" (length warp-colours))))
	  (initOneColourSelect (string-append "colour-" type "-" (length warp-colours) "-div"))
	  (set! warp-colours (append warp-colours (list (hex->colour "#c5b799"))))))
   (else
	(let ((c ($ "#weft-colours")))
	  (c.append (colour-selector (string-append "colour-" type "-" (length weft-colours))))
	  (initOneColourSelect (string-append "colour-" type "-" (length weft-colours) "-div"))
	  (set! weft-colours (append weft-colours (list (hex->colour "#c5b799")))))))
  (update))

(define (remove-colour type)
  (cond
   ((eq? type "warp")
	(when (> (length warp-colours) 1) 
		  (let ((el ($ (dbg (string-append "#colour-" type "-" (- (length warp-colours) 1) "-div")))))
			(el.remove)
			(set! warp-colours (reverse (cdr (reverse warp-colours)))))))
   (else
	(when (> (length weft-colours) 1) 
		  (let ((el ($ (string-append "#colour-" type "-" (- (length weft-colours) 1) "-div"))))
			(el.remove)
			(set! weft-colours (reverse (cdr (reverse weft-colours))))))))
  (update))

(define (update-colour c)
  (let ((ss (c.id.split "-")))
	(let ((type (list-ref ss 1))
		  (id (string->number (list-ref ss 2))))
	  ;;(msg c.value)
	  ;;(msg (hex->colour c.value))

	  (if (eq? type "warp")
		  (set! warp-colours
				(list-replace
				 warp-colours id
				 (hex->colour c.value)))
		  (set! weft-colours
				(list-replace
				 weft-colours id
				 (hex->colour c.value))))
	  (update)
	  )))
		 

