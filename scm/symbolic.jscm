;; -*- mode: scheme; -*-

;; Penelope Project Software Copyright (C) 2020 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(load "flx/scm/fluxus.jscm")

;;------------------------------------------------------------
;; produces lists of thread codes from kernels

;; kernel  = ((1 0)(0 1))
;; pattern = 0 1 0 1 0 1 0 1 
;; thread  = u fu fu d fd fd u

(define (make-even v)
  (if (zero? (modulo v 2))
      v (+ v 1)))

(define (pattern-extend c m p)
  (cond
    ((>= c m) '())
    (else
     (cons
      (list-ref p (modulo c (length p)))
      (pattern-extend (+ c 1) m p)))))

(define (pattern-invert p)
  (map
   (lambda (i)
     (if (zero? i) 1 0))
   p))

(define (pattern->token kernel-code state)
  (if (zero? kernel-code)
      (if (eq? state "d") "fd" "d")  
      (if (eq? state "u") "fu" "u"))) ;; 1 = warp up
  
(define (kernel-row k i)
  (list-ref k (modulo i (length k))))

(define (kernel-col k i)
  (map
   (lambda (row)
     (kernel-row row i))
   k))

(define (kernel-invert k)
  (map
   (lambda (r)
     (pattern-invert r))
   k))

(define (pattern->thread pattern state) 
  (cond
    ((null? pattern) '())
    (else
     (let ((token (pattern->token (car pattern) state)))
       (cons
        token
        (pattern->thread
         (cdr pattern)
         (cond
           ((eq? token "u") "u")
           ((eq? token "d") "d")
           (else state))))))))

(define (kernel-final-state kernel warp-thread fabric-height)
  (let ((thread (pattern->thread
		 (pattern-extend 0 fabric-height (kernel-col kernel warp-thread))
		 "?")))
    ;; we need to run through the whole pattern to check the state
    ;; at the end, to then plug in to recalculating it
    (let ((token (list-ref thread (- (length thread) 1))))
      (if (or (eq? token "u") (eq? token "fu"))
	  "u" "d"))))

(define (kernel->warp-thread kernel warp-thread fabric-height)
  (pattern->thread
   (pattern-extend 0 fabric-height (kernel-col kernel warp-thread))
   (kernel-final-state kernel warp-thread fabric-height)))

(define (make-selvedge direction size)
  (define (_ c)
	(cond
	 ((eq? c 1) '()) ;; one = loop right around
	 (else
	  ;; todo: selvedge up/down/middle?
	  (cons "fu" (_ (- c 1))))))
  (append
   (list (if (zero? direction) "r" "l"))
   (_ size)
   (list (if (zero? direction) "r" "l"))))

(define (kernel->weft-thread kernel row fabric-width fabric-height selvedge-size)
  (cond
   ((>= row fabric-height) '())
   (else
	(let ((direction (modulo (quotient row selvedge-size) 2)))	   
	  (append
	   (pattern->thread
		(pattern-invert
		 (if (zero? direction)
			 (pattern-extend
			  0 (+ fabric-width 1) (kernel-row kernel row))
			 (reverse
			  (pattern-extend
			   -1 fabric-width (kernel-row kernel row)))))
		"?")		
	   (make-selvedge direction selvedge-size)
	   (kernel->weft-thread
		kernel
		(+ row selvedge-size)
		fabric-width fabric-height selvedge-size))))))

