;; -*- mode: scheme; -*-

;; Penelope Project Software Copyright (C) 2020 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(load "flx/scm/fluxus.jscm")
(load "scm/symbolic.jscm")
(load "scm/constructor.jscm")
(load "scm/components.jscm")

(define (loom draft warp weft state t root)
  (list draft warp weft state t root))

(define (loom-draft l) (list-ref l 0))
(define (loom-modify-draft l v) (list-replace l 0 v))
(define (loom-warp l) (list-ref l 1))
(define (loom-modify-warp l v) (list-replace l 1 v))
(define (loom-weft l) (list-ref l 2))
(define (loom-modify-weft l v) (list-replace l 2 v))
(define (loom-state l) (list-ref l 3))
(define (loom-modify-state l v) (list-replace l 3 v))
(define (loom-t l) (list-ref l 4))
(define (loom-modify-t l v) (list-replace l 4 v))
(define (loom-root l) (list-ref l 5))

;; ----------------------------------------------------------

(define (build-loom draft warp-threads weft-threads warp-colours weft-colours)
  (let ((root (build-locator)))
    (with-state
     (shader-assign-compiled "default")  
     (parent root)
     (loom
      draft
      (build-list
       warp-threads
       (lambda (i)
		 (constructor
		  (kernel->warp-thread draft i weft-threads)
		  0
		  (mrotate
		   (mtranslate (midentity) (vector (+ i 0.5) 1.5 0))
		   (vector 0 0 1)
		   (* -90 rad-conv))
		  (list-ref warp-colours (modulo i (length warp-colours)))
		  '())))
      (build-list
       (length weft-colours)
	   (lambda (i)
		 (constructor
		  (kernel->weft-thread
		   draft i warp-threads weft-threads (length weft-colours))
		  i
		  (mtranslate (midentity) (vector i (- i) 0))
		  (list-ref weft-colours (modulo i (length weft-colours)))		  
		  '())))
      "filling-warp"
      0
      root))))

(define (loom-step-warp l components)
  (loom-modify-warp
   l (map
      (lambda (e)
	(with-state
	 (parent (loom-root l))
	 (constructor-step e components)))
      (loom-warp l))))

(define (loom-step-weft l components)
  (loom-modify-weft
   l (map
      (lambda (e)
	(with-state
	 (parent (loom-root l))
	 (constructor-step e components)))
      (loom-weft l))))

(define move-time 1)
(define weave-time 0.05)

(define (loom-update l d components)
  (let ((state (loom-state l)))
    (cond
     ((eq? state "filling-warp")
      (if (< (constructor-pc (car (loom-warp l)))
	     (- (length (constructor-code (car (loom-warp l)))) 1))
	  (loom-step-warp l components)
	  (loom-modify-state
	   ;; step the warp a few extra times to bring
	   ;; it under the weaving pos
	   (loom-step-warp 
	    (loom-step-warp l components)
	    components)
	   "filling-weft")))
     ((eq? state "filling-weft")
      (if (< (constructor-pc (car (loom-weft l)))
	     (- (length (constructor-code (car (loom-weft l)))) 1))
	  (loom-step-weft l components)
	  (loom-modify-state l "weaving")))
     ((eq? state "weaving")
      (if (> (loom-t l) weave-time)
	  (loom-step-weft 
	   (loom-modify-t
	    (let ((step (constructor-next-instr (car (loom-weft l)))))
	      (if (or (eq? step "l") (eq? step "r"))
		  (loom-modify-state l "selvedge")
		  l))    
	    0)
	   components)
	  (loom-modify-t l (+ (loom-t l) d))))
     ((eq? state "selvedge")
      (if (> (loom-t l) weave-time)
	  (loom-step-weft 
	   (loom-modify-t
	    (let ((step (constructor-next-instr (car (loom-weft l)))))
	      (if (or (not (eq? step "l")) (not (eq? step "r")))
		  (loom-modify-state
		   (loom-step-warp
		    (loom-update-draft 
		     l (read-draft-interface)
		     (read-number "fabric-warp-size")
		     (make-even (read-number "fabric-weft-size")))
		    components) "moving")
		  l))    
	    0)
	   components)
	  (loom-modify-t l (+ (loom-t l) d))))      
     ((eq? state "moving")
      (with-primitive
       (loom-root l)
       (translate (vector 0 d 0)) ;; one unit per second
       (if (> (loom-t l) move-time)
	   (loom-modify-state l "weaving")
	   (loom-modify-t l (+ (loom-t l) d)))))
     (else l))))


(define (loom-update-draft l draft warp-threads weft-threads)
  (loom-modify-draft
   (loom-modify-weft
    (loom-modify-warp
     l (index-map
		(lambda (i e)
		  (constructor-modify-code
		   e (kernel->warp-thread draft i weft-threads)))
		(loom-warp l)))
    (index-map
     (lambda (i e)
       (constructor-modify-code
		e (kernel->weft-thread
		   draft i warp-threads weft-threads
		   (length (loom-weft l)))))
	 (loom-weft l)))
   draft))


