;; -*- mode: scheme; -*-

;; Penelope Project Software Copyright (C) 2020 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(load "flx/scm/fluxus.jscm")

(define comp-points 10)
(define comp-segments (- (/ comp-points 2) 1))

(define (auto-strip-normals flat)
  (pdata-index-map!
   (lambda (i n)
     (if (< i 2)
		 (vcross
		  (vnormalise (vsub (pdata-ref "p" 1) (pdata-ref "p" (+ i 2))))
		  (if flat
			  (vector 0 1 0)
			  (if (zero? (modulo i 2))
				  (vnormalise (vector 0 0.5 0.5))
				  (vnormalise (vector 0 0.5 -0.5)))))
		 (vcross
		  (vnormalise (vsub (pdata-ref "p" (- i 2)) (pdata-ref "p" i)))
		  (if flat
			  (vector 0 1 0)
			  (if (zero? (modulo i 2))
				  (vnormalise (vector 0 0.5 0.5))
				  (vnormalise (vector 0 0.5 -0.5)))))))
   "n"))

(define (auto-strip-tex)
  (pdata-index-map!
   (lambda (i t)
     (if (zero? (modulo i 2))
		 (vector (/ (quotient i 2) comp-segments) 0 0)
		 (vector (/ (quotient i 2) comp-segments) 1 0)))
   "t"))


(define (init-components)
  (list
   ;; forward
   (build-polygons 'triangles 6)
   ;; forward up
   (build-polygons 'triangles 6)
   ;; forward down
   (build-polygons 'triangles 6)  
   ;; right
   (build-polygons 'triangle-strip comp-points)
   ;; left
   (build-polygons 'triangle-strip comp-points)
   ;; up-right
   (build-polygons 'triangle-strip comp-points)
   ;; up-left
   (build-polygons 'triangle-strip comp-points)
   ;; down-right
   (build-polygons 'triangle-strip comp-points)
   ;; down-left
   (build-polygons 'triangle-strip comp-points)
   ;; right-up
   (build-polygons 'triangle-strip comp-points)
   ;; left-up
   (build-polygons 'triangle-strip comp-points)
   ;; right-down
   (build-polygons 'triangle-strip comp-points)
   ;; left-down
   (build-polygons 'triangle-strip comp-points)
   ;; up
   (build-polygons 'triangle-strip comp-points)
   ;; down
   (build-polygons 'triangle-strip comp-points)))

(define (build-forward p thread-width use-texture flat z-offset)
  (define thread-start (/ (- 1 thread-width) 2))
  (define thread-end (- 1 thread-start))
  (with-primitive
   p
   (hide 1)
   (texture (load-texture (if use-texture "thread.png" "white.png")))
   (pdata-set! "p" 0 (vector 0 thread-start z-offset))
   (pdata-set! "p" 1 (vector 1 thread-start z-offset))
   (pdata-set! "p" 2 (vector 1 thread-end z-offset))
   (pdata-set! "p" 3 (vector 0 thread-start z-offset))
   (pdata-set! "p" 4 (vector 0 thread-end z-offset))
   (pdata-set! "p" 5 (vector 1 thread-end z-offset))

   (cond
	(flat
	 (pdata-map! (lambda (n) (vector 0 0 -1)) "n"))
	(else
	 (pdata-set! "n" 0 (vector 0 0.5 -0.5))
	 (pdata-set! "n" 1 (vector 0 0.5 -0.5))
	 (pdata-set! "n" 2 (vector 0 -0.5 -0.5))
	 (pdata-set! "n" 3 (vector 0 0.5 -0.5))
	 (pdata-set! "n" 4 (vector 0 -0.5 -0.5))
	 (pdata-set! "n" 5 (vector 0 -0.5 -0.5))))
   
   (pdata-set! "t" 0 (vector 0 0 0))
   (pdata-set! "t" 1 (vector 1 0 0))
   (pdata-set! "t" 2 (vector 1 1 0))
   (pdata-set! "t" 3 (vector 0 0 0))
   (pdata-set! "t" 4 (vector 0 1 0))
   (pdata-set! "t" 5 (vector 1 1 0))
   (pdata-map! (lambda (c) (vector 1 1 1)) "c")

   (pdata-upload!))
  p)

(define (build-right p thread-width use-texture flat z-offset-start z-offset-end)
  (define thread-start (/ (- 1 thread-width) 2))
  (define thread-end (- 1 thread-start))
  (with-primitive
   p
   (hide 1)
   (texture (load-texture (if use-texture "thread.png" "white.png")))
   (pdata-index-map!
	(lambda (i p)  
	  (let ((r (if (zero? (modulo i 2)) thread-start thread-end)))
		(let ((t (/ (quotient i 2) comp-segments)))
		  (let ((a (* t 0.5 pi)))
			(vadd (vmul (vector (cos a) (sin a) 0) r)
				  (vector 0 0 (lerp z-offset-start z-offset-end t)))))))
	"p")
   (pdata-map! (lambda (c) (vector 1 1 1)) "c")
   (auto-strip-tex)
   (cond
	(flat
	 (pdata-map! (lambda (n) (vector 0 0 -1)) "n"))
	(else
	 (auto-strip-normals #f)
	 (pdata-map! (lambda (n) (vmul n -1)) "n")))
   (pdata-upload!))
  p)

(define (build-left p thread-width use-texture flat z-offset-start z-offset-end)
  (define thread-start (/ (- 1 thread-width) 2))
  (define thread-end (- 1 thread-start))
  (with-primitive
   p
   (hide 1)
   (pdata-index-map!
	(lambda (i p)  
	  (let ((r (if (zero? (modulo i 2)) thread-end thread-start)))
		(let ((t (/ (quotient i 2) comp-segments)))
		  (let ((a (* t 0.5 pi)))
			(vadd (vmul (vector (cos a) (- (sin a)) 0) r)
				  (vector 0 1 (lerp z-offset-start z-offset-end t)))))))
	"p")
   (auto-strip-tex)
   (cond
	(flat
	 (pdata-map! (lambda (n) (vector 0 0 -1)) "n"))
	(else
	 (auto-strip-normals #f)
	 (pdata-map! (lambda (n) (vmul n -1)) "n")))
   (pdata-map! (lambda (c) (vector 1 1 1)) "c")
   
   (pdata-upload!))
  p)

(define (build-components components weave-height thread-width use-texture flat)
  (define thread-start (/ (- 1 thread-width) 2))
  (define thread-end (- 1 thread-start))

  ;; todo: instances don't seem to inherit texture state...
  
  (list
   ;; forward 
   (build-forward (list-ref components 0) thread-width use-texture flat 0)
   ;; forward up	
   (build-forward (list-ref components 1) thread-width use-texture flat weave-height)
   ;; forward down
   (build-forward (list-ref components 2) thread-width use-texture flat -weave-height)
   ;; right
   (build-right (list-ref components 3) thread-width use-texture flat 0 0)
   ;; left
   (build-left (list-ref components 4) thread-width use-texture flat 0 0)

   ;; up-right
   (build-right (list-ref components 5) thread-width use-texture flat 0 weave-height)
   ;; up-left
   (build-left (list-ref components 6) thread-width use-texture flat 0 0)
   ;; down-right 
   (build-right (list-ref components 7) thread-width use-texture flat 0 -weave-height)
   ;; down-left
   (build-left (list-ref components 8) thread-width use-texture flat 0 -weave-height)
   ;; right-up
   (build-right (list-ref components 9) thread-width use-texture flat weave-height 0)
   ;; left-up
   (build-left (list-ref components 10) thread-width use-texture flat weave-height 0)
   ;; right-down 
   (build-right (list-ref components 11) thread-width use-texture flat 0 0)
   ;; left-down
   (build-left (list-ref components 12) thread-width use-texture flat -weave-height 0)
   
   ;; up (down - up)
   (let ((p (list-ref components 13)))
     (with-primitive
      p
      (hide 1)
      (texture (load-texture (if use-texture "thread.png" "white.png")))
      (rotate (vector 45 0 0))
      (pdata-index-map!
       (lambda (i p)
		 (vector
		  (/ (quotient i 2) comp-segments)
		  (if (zero? (modulo i 2)) thread-start thread-end)
		  (* (cos (* pi (/ (quotient i 2) comp-segments))) -weave-height)))
       "p")

      (auto-strip-tex)
      (pdata-map! (lambda (c) (vector 1 1 1)) "c")

      (auto-strip-normals flat)

      (when (not flat)
			(pdata-set! "n" 0 (vector 0 0.5 -0.5))
			(pdata-set! "n" 1 (vector 0 -0.5 -0.5)))
      
      (pdata-upload!))
     p)
   
   ;; down (up - down)
   (let ((p (list-ref components 14))) 
     (with-primitive
      p
      (hide 1)
      (texture (load-texture (if use-texture "thread.png" "white.png")))
      (rotate (vector 45 0 0))
      (pdata-index-map!
       (lambda (i p)
		 (vector
		  (/ (quotient i 2) comp-segments)
		  (if (zero? (modulo i 2)) thread-start thread-end)
		  (* (cos (* pi (/ (quotient i 2) comp-segments))) weave-height)))
	   "p")
	  
	  (auto-strip-tex)
      (pdata-map! (lambda (c) (vector 1 1 1)) "c")
      (auto-strip-normals flat)

      (when (not flat)
			(pdata-set! "n" 0 (vector 0 0.5 -0.5))
			(pdata-set! "n" 1 (vector 0 -0.5 -0.5)))
      
      (pdata-upload!))
     p)


   ))


