;; -*- mode: scheme; -*-

;; Penelope Project Software Copyright (C) 2020 FoAM Kernow
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as
;; published by the Free Software Foundation, either version 3 of the
;; License, or (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

(load "flx/scm/fluxus.jscm")

(define (constructor code pc tx col prims)
  (list code pc tx col prims))

(define (constructor-code p) (list-ref p 0))
(define (constructor-modify-code p v) (list-replace p 0 v))
(define (constructor-pc p) (list-ref p 1))
(define (constructor-tx p) (list-ref p 2))
(define (constructor-col p) (list-ref p 3))
(define (constructor-prims p) (list-ref p 4))
(define (constructor-modify-prims p v) (list-replace p 4 v))

(define (constructor-update-tx tx instr)
  (let ((token (car instr)))
    (cond
     ((eq? token "r") (mrotate tx (vector 0 0 1) (* -90 rad-conv)))
     ((eq? token "l") (mtranslate
		       (mrotate tx (vector 0 0 1) (* 90 rad-conv))
		       (vector 1 -1 0)))
     (else (mtranslate tx (vector 1 0 0))))))

(define debug-components #t)

(define (constructor-build-part c token parts)
  (with-state
   (colour (constructor-col c))
   (concat (constructor-tx c))
   (cond
    ((eq? token "fu") (build-instance (list-ref parts 0)))
    ((eq? token "fd") (build-instance (list-ref parts 1)))
    ((eq? token "r") (build-instance (list-ref parts 2)))
    ((eq? token "l") (build-instance (list-ref parts 3)))
    ((eq? token "u") (build-instance (list-ref parts 4)))
    ((eq? token "d") (build-instance (list-ref parts 5)))
    (else (msg (+ "unknown token " token)) 0))))

(define (constructor-update c parts)
  (if (< (constructor-pc c) (length (constructor-code c)))
      (let ((instr (list-ref (constructor-code c)
			     (constructor-pc c))))
	;; build the prim before (mutably??!) altering tx 
	(let ((prim (constructor-build-part c instr parts)))
	  (constructor
	   (constructor-code c)
	   (+ (constructor-pc c) 1)
	   (constructor-update-tx (constructor-tx c) instr)
	   (constructor-col c)
	   (append (constructor-prims c) prim))))
      c))

(define (constructor-next-instr c)
  (list-ref (constructor-code c)
	    (constructor-pc c)))

(define (constructor-recycle c)
  (cond
   ((> (length (constructor-prims c))
       ;; we assume every code has a shape associated with it here
       (* (length (constructor-code c)) 2))
    (destroy (car (constructor-prims c)))
    (constructor-modify-prims c (cdr (constructor-prims c))))
   (else c)))

(define (constructor-step c parts)
  (let ((instr (list-ref (constructor-code c)
			 (constructor-pc c))))
    ;; build the prim before (mutably??!) altering tx 
    (let ((prim (constructor-build-part c instr parts)))
      (constructor-recycle
       (constructor
	(constructor-code c)
	(modulo (+ (constructor-pc c) 1)
		(length (constructor-code c)))
	(constructor-update-tx (constructor-tx c) instr)
	(constructor-col c)
	(append (constructor-prims c) prim))))))
